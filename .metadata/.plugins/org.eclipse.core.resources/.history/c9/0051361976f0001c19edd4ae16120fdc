package fr.diginamic.java17.gestiondepersonnes;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import fr.diginamic.java17.gestiondepersonnes.classes.Facteur;
import fr.diginamic.java17.gestiondepersonnes.classes.Personne;
import fr.diginamic.java17.gestiondepersonnes.enums.Genre;

public class AppStream01Collect {

	public static void main(String[] args) {

List<Personne> lp = new ArrayList();
lp.add(new Facteur ("Fact01", "Jean", Genre.Mr));
lp.add(new Facteur ("Fact02", "martine", Genre.Mme));
lp.add(new Facteur ("Fact03", "pauline", Genre.Melle));
lp.add(new Facteur ("Fact04", "paul", Genre.Mr));

/**
 * 1 récupérer la liste des noms de facteurs
 * 2 récupérer les noms des facteurs dans une chaine (sans séparateur explicite)
 * 3 récupérer les noms des facteurs dans une chaine (avec ;)
 */

//1


/**
* List<String> lnoms c'est le résultat attendu -> IMPOSER
* EN STREAM ? : lp.stream()
* noms des Facteurs : map(p->p.getNom()) -> mettre en mémoire de
* ma liste : List<Personne> => uniquement le nom du Facteur
* Collect : Traitement qui me retourne un flux d'information
* correspondant au type attendu en résultat List<String>
* collect(Collectors.toList())
* Collectors.toList() : c'est le type de List du contenu dépendant
* du map.
* C'est pour cela que j'obtiens une liste de String
*/
List<String> lnoms= lp.stream().map(p->p.getNom()).collect(Collectors.toList());


//AVANT
List<String> lnomsV0 = new ArrayList<String>();
for(Personne p : lp) {
lnomsV0.add(p.getNom());
}

lnoms.forEach(System.out::println);
	}

}
